<launch>
    <env name="ROSCONSOLE_FORMAT" value="[${node}] [${severity}] [WallTime: ${time}]: ${message}" />

    <arg name="hero" default="true" />
    <arg name="actions" default="false" />
    <arg name="rpc" default="false" />
    <arg name="feedback_cameras" default="false" />
    <arg name="autonomy_cameras" default="false" />
    <arg name="autonomy" default="false" />


    <!-- hero communication node -->
    <group if="$(eval hero)">
        <!-- this bash script just contains 'sudo chmod 666 /dev/ttyUSB0' -->
        <!-- <node name="hero_permission" pkg="hero_board" type="permission.sh" output="screen" /> -->
        <node name="hero_comm" pkg="hero_board" type="send_recv.py" output="screen" />
    </group>

    <!-- actions -->
    <group if="$(eval actions)">
        <node name="actions" pkg="actions" type="actions_node.py" output="screen" />
    </group>

    <!-- rpc server -->
    <group if="$(eval rpc)">
        <node name="rpc_server" pkg="rpc-server" type="grpc-server" output="screen" />
    </group>

    <group if="$(eval feedback_cameras)">
        <include file="$(find video_stream_opencv)/launch/camera.launch" >
            <!-- node name and ros graph name -->
            <arg name="camera_name" value="webcam0" />
            <!-- means video device 0, /dev/video0 -->
            <arg name="video_stream_provider" value="/dev/video0" />
            <!-- <arg name="video_stream_provider" value="/home/ethan/Downloads/video.mp4" /> -->

            <!-- set camera fps to (if the device allows) -->
            <arg name="set_camera_fps" value="5"/>
            <!-- set buffer queue size of frame capturing to -->
            <arg name="buffer_queue_size" value="1" />
            <!-- throttling the querying of frames to -->
            <arg name="fps" value="5" />
            <!-- setting frame_id -->
            <arg name="frame_id" value="webcam0" />
            <!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
            "file:///$(find your_camera_package)/config/your_camera.yaml" -->
            <!-- <arg name="camera_info_url" value="" /> -->
            <!-- flip the image horizontally (mirror it) -->
            <arg name="flip_horizontal" value="false" />
            <!-- flip the image vertically -->
            <arg name="flip_vertical" value="false" />
            <!-- visualize on an image_view window the stream generated -->
            <arg name="visualize" value="false" />
        </include>

        <include file="$(find video_stream_opencv)/launch/camera.launch" >
            <arg name="camera_name" value="webcam1" />
            <arg name="video_stream_provider" value="/dev/video1" />
            <arg name="set_camera_fps" value="5"/>
            <arg name="buffer_queue_size" value="1" />
            <arg name="fps" value="5" />
            <arg name="frame_id" value="webcam1" />
            <arg name="flip_horizontal" value="false" />
            <arg name="flip_vertical" value="false" />
            <arg name="visualize" value="false" />
        </include>

        <!-- This doesn't seem to be needed because the theora topic comes up automatically -->
        <!-- <node name="image_transport" pkg="image_transport" type="republish" output="screen" 
            args="raw in:=/webcam0/image_raw theora out:=/transport/webcam0_theora" /> -->

        <!-- Sets the initial camera parameters to the ones in the config file -->
        <include file="$(find camera_streamer)/launch/load_config.launch" />

    </group>

    <!-- static transforms -->
    <!-- <node pkg="navigation" type="static_tf" name="static_tf" output="screen"></node> -->

    <group if="$(eval autonomy_cameras)">
        <!-- <include file="$(find navigation)/launch/d435_camera.launch"></include> -->
        <!-- use a bash script to delay t265 launch -->
        <!-- <node pkg="navigation" name="t265_script" type="t265_camera.sh" output="screen"></node> -->
        <!-- <include file="$(find navigation)/launch/t265_camera.launch"></include> -->

        <include file="$(find navigation)/launch/cameras.launch"></include>
    </group>

    <group if="$(eval autonomy)">
        <!-- depth to point cloud -->
        <include file="$(find processing)/launch/pointcloud.launch">
            <arg name="rgb_pc" value="false" />
        </include>

        <!-- apriltag detection -->
        <include file="$(find apriltag_ros)/launch/continuous_detection.launch">
            <arg name="camera_name" value="/d435/color" />
            <arg name="camera_frame" value="d435_link" />
            <arg name="image_topic" value="image_raw" />
        </include>

        <!-- <node pkg="navigation" type="fake_odom" name="odom_node" output="screen"> -->
            <!-- <param name="odom_param" value="param_value" /> -->
        <!-- </node> -->

    </group>
</launch>

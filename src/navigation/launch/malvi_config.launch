<launch>
    <env name="ROSCONSOLE_FORMAT" value="[${node}] [${severity}] [WallTime: ${time}]: ${message}" />

    <arg name="hero" default="false" />
    <arg name="actions" default="false" />
    <arg name="rpc" default="false" />
    <arg name="feedback_cameras" default="false" />
    <arg name="autonomy_cameras" default="false" />
    <arg name="autonomy" default="true" />
    <arg name="webcam_enabled" default="true" />
    <arg name="naive_autonomy" default="true" />


    <!-- hero communication node -->
    <group if="$(eval hero)">
        <!-- this bash script just contains 'sudo chmod 666 /dev/ttyUSB0' -->
        <!-- <node name="hero_permission" pkg="hero_board" type="permission.sh" output="screen" /> -->
        <node name="hero_comm" pkg="hero_board" type="send_recv.py" output="screen" />
    </group>

    <!-- actions -->
    <group if="$(eval actions)">
        <node name="actions" pkg="actions" type="actions_node.py" output="screen" />
    </group>

    <!-- rpc server -->
    <group if="$(eval rpc)">
        <node name="rpc_server" pkg="rpc-server" type="grpc-server" output="screen" />
    </group>

    <group if="$(eval feedback_cameras)">
        <!-- To calibrate: rosrun camera_calibration cameracalibrator.py - -pattern=chessboard - -size=6x8 - -square=0.024 image:=/webcam0/image_raw -->
        <include file="$(find video_stream_opencv)/launch/camera.launch" >
            <!-- node name and ros graph name -->
            <arg name="camera_name" value="webcam0" />
            <!-- means video device 0, /dev/video0 -->
            <arg name="video_stream_provider" value="/dev/video0" />
            <!-- <arg name="video_stream_provider" value="/home/ethan/Downloads/video.mp4" /> -->

            <!-- set camera fps to (if the device allows) -->
            <arg name="set_camera_fps" value="5"/>
            <!-- set buffer queue size of frame capturing to -->
            <arg name="buffer_queue_size" value="1" />
            <!-- throttling the querying of frames to -->
            <arg name="fps" value="5" />
            <!-- setting frame_id -->
            <arg name="frame_id" value="webcam0" />
            <!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
            "file:///$(find your_camera_package)/config/your_camera.yaml" -->
            <arg name="camera_info_url" value="file:///$(find navigation)/config/cameras/depstech_webcam_calibration.yaml" />
            <!-- flip the image horizontally (mirror it) -->
            <arg name="flip_horizontal" value="false" />
            <!-- flip the image vertically -->
            <arg name="flip_vertical" value="false" />
            <!-- visualize on an image_view window the stream generated -->
            <arg name="visualize" value="false" />
        </include>

        <!-- <include file="$(find video_stream_opencv)/launch/camera.launch" >
            <arg name="camera_name" value="webcam1" />
            <arg name="video_stream_provider" value="/dev/video1" />
            <arg name="set_camera_fps" value="5"/>
            <arg name="buffer_queue_size" value="1" />
            <arg name="fps" value="5" />
            <arg name="frame_id" value="webcam1" />
            <arg name="flip_horizontal" value="false" />
            <arg name="flip_vertical" value="false" />
            <arg name="visualize" value="false" />
        </include> -->

        <!-- This doesn't seem to be needed because the theora topic comes up automatically -->
        <!-- <node name="image_transport" pkg="image_transport" type="republish" output="screen" 
            args="raw in:=/webcam0/image_raw theora out:=/transport/webcam0_theora" /> -->

        <!-- Sets the initial camera parameters to the ones in the config file -->
        <!-- <include file="$(find camera_streamer)/launch/load_config.launch" /> -->
    </group>

    <group if="$(eval autonomy_cameras)">
        <include file="$(find navigation)/launch/cameras.launch"></include>
    </group>

    <!-- testing webcam -->
    <group if="$(eval webcam_enabled)">
        <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" >
            <param name="video_device" value="/dev/video0" />
            <param name="image_width" value="640" />
            <param name="image_height" value="480" />
            <param name="pixel_format" value="mjpeg" />
            <param name="color_format" value="yuv422p" />
            <param name="camera_frame_id" value="usb_cam" />
            <param name="io_method" value="mmap"/>
            <param name="camera_info_url" value="file:///$(find navigation)/config/cameras/xps_webcam_calibration.yaml" />
        </node>
    </group>

    <group if="$(eval autonomy)">

        <!-- apriltag detection -->
        <arg name="apriltag_camera_name" default="/usb_cam" />
        <arg name="apriltag_image_topic" default="image_raw" /> <!-- TODO use recitified image -->
        <arg name="apriltag_queue_size" default="1" />
        <!-- apriltag_ros continuous detection node -->
        <!-- <node pkg="apriltag_ros" type="apriltag_ros_continuous_node" name="apriltag_ros_continuous_node" clear_params="true" output="screen" launch-prefix="$(arg launch_prefix)"> -->
        <node pkg="apriltag_ros" type="apriltag_ros_continuous_node" name="apriltag_ros_continuous_node" clear_params="true" output="screen">

            <!-- Remap topics from those used in code to those on the ROS network -->
            <remap from="image_rect" to="$(arg apriltag_camera_name)/$(arg apriltag_image_topic)" />
            <remap from="camera_info" to="$(arg apriltag_camera_name)/camera_info" />

            <param name="publish_tag_detections_image" type="bool" value="false" /> <!-- default: false --> <!-- TODO disable this once the system works to save processing -->
            <param name="publish_tf" type="bool" value="false" />
            <param name="queue_size" type="int" value="$(arg apriltag_queue_size)" />

            <!-- load parameters (incl. tag family, tags, etc.) -->
            <rosparam command="load" file="$(find navigation)/config/apriltag/settings.yaml"/>
            <rosparam command="load" file="$(find navigation)/config/apriltag/tags.yaml"/>
        </node>
        
        <!-- odometry based on apriltag -->
        <rosparam file="$(find navigation)/config/apriltag/tag_positions.yaml" command="load" />
        <node pkg="navigation" type="environment_visualizer" name="environment_visualizer" output="screen" />
        <!-- <node pkg="navigation" type="apriltag_odom" name="localization_node" output="screen" /> -->

        <!-- fake odometry and tf based on /cmd_vel alone -->
        <!-- <node pkg="navigation" type="fake_odom" name="odom_node" output="screen">
            <param name="odom_param" value="param_value" />
        </node> -->

        <!-- <include file="$(find navigation)/launch/slam.launch"></include> -->
    </group>

    <group if="$(eval naive_autonomy)">
        <node pkg="navigation" type="naive-nav.py" name="naive_navigator"/>
        <!-- the following two static transforms are inspired by https://github.com/mit212/me212lab3/blob/master/catkin_ws/src/me212bot/launch/frames.launch -->
        <!-- these are placeholder values that cause no transformation to occur -->
        <node pkg="tf2_ros" name="map_to_apriltag" type="static_transform_publisher" args="0 0 0 1 0 0 0 /map /tag_1" />
        <node pkg="tf2_ros" name="robot_base_to_camera" type="static_transform_publisher" args="0 0 0 1 0 0 0 /robot_base /usb_cam" />
    </group>

</launch>
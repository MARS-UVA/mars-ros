<launch>
    <env name="ROSCONSOLE_FORMAT" value="[${node}] [${severity}] [WallTime: ${time}]: ${message}" />

    <!-- NODES -->
    <arg name="hero" default="true" />
    <arg name="actions" default="true" />
    <arg name="rpc" default="false" />
    <arg name="realsense_cameras" default="false" /> 
    <arg name="apriltags" default="true" />

    <!-- ARGUMENTS -->
    <arg name="webcam_enabled" default="true" />
    <arg name="naive_autonomy" default="false" />
    <arg name="autonomy_motor_current_mode" default="true" />
    <arg name="autonomy_twist_mode" default="true" />
    <arg name="debug_mode" default="true" />
    <arg name="simulation_mode" default="false" />
    <arg name="apriltag_ids" default="2 5 4" />
    <arg name="apriltag_camera_device_id" default="0" /> <!-- 2 on control station, 0 on robot -->
    <arg name="apriltag_camera" default="usb_cam" /> <!-- usb_cam for webcam on robot or control station, /camera/rgb for simulation -->

    <!-- hero communication node -->
    <group if="$(eval hero)">
        <!-- this bash script just contains 'sudo chmod 666 /dev/ttyUSB0' -->
        <!-- <node name="hero_permission" pkg="hero_board" type="permission.sh" output="screen" /> -->
        <node name="hero_comm" pkg="hero_board" type="send_recv.py" output="screen" />
    </group>

    <!-- actions -->
    <group if="$(eval actions)">
        <node name="actions" pkg="actions" type="actions_node.py" output="screen" />
        <node name="gpio_read" pkg="actions" type="gpio_read.py" output="screen" />
        <node name="ir_adc_node" pkg="actions" type="ir_adc_node.py" output="screen" />
    </group>

    <group if="$(eval realsense_cameras)">
        <include file="$(find navigation)/launch/depth_camera.launch"></include>
        <!-- <include file="$(find realsense2_camera)/launch/demo_t265.launch"></include>  -->  
    </group>

    <!-- testing webcam -->
    <group if="$(eval webcam_enabled)">

        <node name="usb_cam" pkg="cv_camera" type="cv_camera_node" >
            <param name="image_width" value="640" />
            <param name="image_height" value="480" />
            <param name="frame_id" value="$(arg apriltag_camera)" />
            <param name="device_id" value="$(arg apriltag_camera_device_id)" /> <!-- gets the video feed from /dev/video2 -->
            <param name="camera_info_url" value="file:///$(find navigation)/config/cameras/xps_webcam_calibration.yaml" />
        </node>
    </group>

    <group if="$(eval apriltags)">

        <!-- arguments -->
        <arg name="apriltag_camera_name" default="$(arg apriltag_camera)" /> 
        <arg name="apriltag_image_topic" default="image_raw" /> <!-- TODO use recitified image -->
        <arg name="apriltag_queue_size" default="1 " />

        <!-- apriltag_ros continuous detection node; this looks for the apriltags -->
        <node pkg="apriltag_ros" type="apriltag_ros_continuous_node" name="apriltag_ros_continuous_node" clear_params="true" output="screen">

            <!-- Remap topics from those used in code to those on the ROS network -->
            <remap from="image_rect" to="$(arg apriltag_camera_name)/$(arg apriltag_image_topic)" />
            <remap from="camera_info" to="$(arg apriltag_camera_name)/camera_info" />

            <param name="publish_tag_detections_image" type="bool" value="false" /> <!-- if true, publishes a video feed with apriltags in it -->
            <param name="publish_tf" type="bool" value="false" /> <!-- publishes a tf transform from the camera to each detected tag - false because doing so interferes with the apriltag computation node -->
            <param name="queue_size" type="int" value="$(arg apriltag_queue_size)" />

            <!-- load parameters (incl. tag family, tags, etc.) -->
            <rosparam command="load" file="$(find navigation)/config/apriltag/settings.yaml"/>
            <rosparam command="load" file="$(find navigation)/config/apriltag/tags.yaml"/>
        </node>

        <!-- defining static transforms; define where the tags are in the world -->
        <group if="$(eval simulation_mode)">
            <node pkg="tf2_ros" name="map_to_apriltag1" type="static_transform_publisher" args="0.6 0.0 0.1 0 -1.5708 0 map tag_1" />
            <node pkg="tf2_ros" name="map_to_apriltag5" type="static_transform_publisher" args="-0.6 0.0 0.1 0 -1.5708 0 map tag_5" />
            <node pkg="tf2_ros" name="robot_base_to_camera" type="static_transform_publisher" args="0 0 0 0 0 0 1 robot_base usb_cam" />
            <node pkg="tf2_ros" name="robot_base_to_robot_edge" type="static_transform_publisher" args="0 0 0 0 0 0 1 robot_base robot_edge" />
        </group>
        
        <group if="$(eval not simulation_mode)">
            <!-- in rviz, the green axis is y, red is x, blue is z -->
            
            <node pkg="tf2_ros" name="map_to_apriltag2" type="static_transform_publisher" args="0.0 0.0 0.5588 0 0 1.5708 map tag_2" />
            <node pkg="tf2_ros" name="apriltag2_to_apriltag5" type="static_transform_publisher" args="-0.33675 -0.0635 0 0 0 0 tag_2 tag_5" />
            <node pkg="tf2_ros" name="apriltag2_to_apriltag4" type="static_transform_publisher" args="0.33675 -0.0635 0 0 0 0 tag_2 tag_4" />
        
            <node pkg="tf2_ros" name="robot_base_to_camera" type="static_transform_publisher" args="-0.2 0.34 0.41 0 0.0 -1.5708 robot_base usb_cam" />
        </group>


        <!-- computing robot location based on tag detections -->
        <node pkg="navigation" type="apriltag_computation.py" name="apriltag_computation">
            <param name="apriltag_ids" value="$(arg apriltag_ids)"/>
        </node>

    </group>

    <group if="$(eval naive_autonomy)">
        <node pkg="navigation" type="naive-nav.py" name="naive_navigator">
            <param name="motor_command_mode" value="$(arg autonomy_motor_current_mode)"/>
            <param name="twist_mode" value="$(arg autonomy_twist_mode)"/>
            <param name="debug_mode" value="$(arg debug_mode)"/>
            <param name="simulation_mode" value="$(arg simulation_mode)"/>
        </node>
    </group>

</launch>
